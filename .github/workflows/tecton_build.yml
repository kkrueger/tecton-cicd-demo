name: Tecton CICD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  plan:
    runs-on: ubuntu-latest
    outputs:
      planid: ${{ steps.planid.outputs.planid }}
    env:
      TECTON_API_KEY: ${{ secrets.TECTON_API_KEY }}
      API_SERVICE: ${{ vars.API_SERVICE }}
      WORKSPACE: ${{ vars.WORKSPACE }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "pip"

      - name: print variables
        run: |
          echo Running plan
          echo "dev API_SERVICE variable => $API_SERVICE"
          echo "dev WORKSPACE variable =>  $WORKSPACE"
          echo "dev TECTON_API_KEY variable =>  $TECTON_API_KEY"

      - name: Install Tecton CLI
        run: pip install -r requirements.txt

      - name: Select Tecton workspace
        run: tecton workspace select $WORKSPACE

      - name: Run Tecton plan
        run: tecton plan --json-out plan.json

      - name: Extract plan output to get the planid
        id: planid
        run: |
          PLANID=$(jq -r .plan_id < plan.json)
          echo "planid=$PLANID"
          echo "planid=$PLANID" >> $GITHUB_OUTPUT

  apply:
    needs: [plan]
    if:
      github.event_name == 'push' && github.ref == 'refs/heads/main' &&
      needs.plan.outputs.planid != ''
    runs-on: ubuntu-latest
    environment:
      name: prod-apply
    env:
      TECTON_API_KEY: ${{ secrets.TECTON_API_KEY }}
      API_SERVICE: ${{ vars.API_SERVICE }}
      WORKSPACE: ${{ vars.WORKSPACE }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "pip"

      - name: print variables
        run: |
          echo Running apply
          echo "API_SERVICE variable => $API_SERVICE"
          echo "WORKSPACE variable =>  $WORKSPACE"
          echo "TECTON_API_KEY variable =>  $TECTON_API_KEY"

      - name: Install dependencies (e.g Tecton CLI)
        run: pip install -r requirements.txt

      - name: Select Tecton workspace
        run: tecton workspace select $WORKSPACE

      - name: tecton apply planid
        env:
          PLANID: ${{needs.plan.outputs.planid}}
        run: tecton apply -y --plan-id $PLANID